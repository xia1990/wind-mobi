Android：版本发布流程
拿到版本发布需求后，确认该版本项目名称，分支名称，版本号，包含提交。到Gerrit上确认，所有提交是否已经提交，并确保全部被merge入库
确认完后，拉取代码，编译。编译完成后，本地刷机验证版本功能（版本号，版本类型，开关机，打电话，发短信，蓝牙，WIFI,音乐播放等）
版本验证完毕，并确保没有问题时，发送版本邮件

1：gerrit插件/jenkins插件
download插件

2：使用shell脚本做过哪些事情，使用python脚本做过哪些事情

3：使用shell脚本添加path属性，打版本快照，生成xml文件

SHELL脚本
1：用mirror拉代码的脚本（脚本用法：脚本名称+项目名称 目的：实现拖代码加速，同时方便开发工程师不用在拉代码输入一长串的命令  实现方法：
根据项目名称来拉取对应分支的代码：repo init -u $code_url -b $branch_name --reference=$code_mirror -b branch_name）

2：给XML添加path属性值：（目的：代码上库时因为高通的xml没有path属性值，我们需要在xml中添加对应的path属性值。我们添加path属性值的目的。因为如果xml中没有path属性的话，repo sync拉下来的代码在本地的路径是
用name的值，因为name值在远程中可能不规范，所以我们要添加path属性，来统一拉到本地代码的路径）

3：给xml中的name属性值添加前缀，这样做是为了区分不同项目

4：生成版本快照的脚本
（实现方法：1：根据XML来添加对应仓库revision的值，经典命令：git ls-remote ssh://10.0.30.10:29418/name属性的值 -b $branch_name | awk '{print $1}'
  2：根据生成的Revision的值，来进行添加
  git ls-remote ssh://10.0.30.10:29418/name属性的值 -b $branch_name：这个命令可以得到对应分支，在gerrit上的最新一笔提交记录
  实现目的：1：节省拖代码的时间。我们拉一套代码下能可能需要30分钟，如果项目代的话，可能会更长，如果使用脚本的话，直接执行脚本5分钟内就可以打好快照
			2：代版本的repo工具可能没有repo manifest命令）
			
python脚本：
1：导修改点（实现方法：使用python的读写模块，在对应的行列中插入修改的内容）
2：列出一目录下的使用文件，包括子目录（实现方法：使用os模块，os.walk方法）

4：repo源码